#!/usr/bin/env node
const MIN_REPORT_WIDTH = 32,
      DEFAULT_REPORT_WIDTH = 84;
var esprima = require("esprima"),
    sniffer = require('./lib/Sniffer'),
    Reporter = require('./lib/Reporter'),
    Standard,
    fs = require('fs'),
    path,
    reportWidth = DEFAULT_REPORT_WIDTH,
    reporter,
    repOptions,
    options = {},
    stdout,
    helpScreen = "Usage: jscs <path>\n" +
                    "<path> - filename or dir to sniff\n" +
                    "[--standard=<Standard>] - apply specified standard (Idiomatic, Jquery)\n" +
                    "[--report-full] - full report with source codes\n" +
                    "[--report-summary] - summary report\n" +
                    "[--report-xml] - printing an XML report\n" +
                    "[--highlight=0] - disable colors on reports\n" +
                    "[--reportWidth=" + DEFAULT_REPORT_WIDTH + "] - How many columns wide screen reports should be printed\n" +
                    "[--trace] - show tokens\n",

    processFile = function( path, fn ) {
            var data = fs.readFileSync( path, 'utf-8' );
                    fn( path, data );
    },
    processDir = function( path, fn ) {
            var dir = fs.readdirSync( path ),
                stat;
            dir && dir.forEach(function( file ){
                    var re = /\.js$/gi,
                        excludeRe = /\.min\.js$/gi;
                    stat = fs.statSync( path + "/" + file );
                    stat.isFile() && re.test( file ) && !excludeRe.test( file ) &&
                        processFile( path + "/" + file, fn );
                    stat.isDirectory() && processDir( path + "/" + file, fn );
            });
    },
    processPath = function( path, fn ) {
            var stat;
            path = path.replace(/\/+$/, "");
            if (  !fs.existsSync( path ) ) {
                    return console.error( path + " doesn't exist\n" );
            }
            stat = fs.statSync( path );
            return stat.isFile() ? processFile( path, fn ) : processDir( path, fn );
    };

if ( process.argv.length < 3 ) {
    return console.log( helpScreen );
}
// Obtain CLI arguments
process.argv.slice( 2 ).forEach(function( arg ){
    var slices;
    if ( arg === "--help" ) {
            return console.log( helpScreen );
    }
    if ( arg.indexOf( "--" ) === 0 ) {
            slices = arg.split( "=" );
            options[ slices[0] ] = slices[ 1 ] || null;
    } else {
            path = arg;
    }
});
if ( typeof options["--reportWidth"] !== "undefined" &&
    options["--reportWidth"] >= MIN_REPORT_WIDTH ) {
    reportWidth = options["--reportWidth"];
}

// Get standard sniffs
Standard = options["--standard"] || "Idiomatic";

repOptions = ({ format: "full", width: reportWidth });
( typeof options["--trace"] !== "undefined" ) && ( repOptions.format = "trace" );
( typeof options["--report-summary"] !== "undefined" ) && ( repOptions.format = "summary" );
if ( typeof options["--report-xml"] !== "undefined" ) {
    repOptions.format = "xml";
    options["--highlight"] = true;
}
reporter = new Reporter( repOptions );

processPath( path , function(path, data) {
    if ( typeof options["--trace"] !== "undefined" ) {
        reporter.add( path, sniffer.trace(data) );
    } else {
        logger = sniffer.run(data, Standard);
        reporter.add( path, logger.getMessages(), logger.standard );
    }
});

stdout = reporter.print( options["--highlight"] ? { highlight: false } : {} );
if ( stdout.length ) {
    console.error( stdout );
    process.exit( 1 );
}

